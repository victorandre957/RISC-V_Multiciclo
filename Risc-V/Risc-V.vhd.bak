library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Risc_V_Multicycle is
port(
    clock    : in std_logic;
    reset    : in std_logic;
    regInstr : out std_logic_vector(31 downto 0);
    rs1      : out std_logic_vector(31 downto 0);
    rs2      : out std_logic_vector(31 downto 0);
    imm32    : out std_logic_vector(31 downto 0);
    regData  : out std_logic_vector(31 downto 0);
    pcOut    : out std_logic_vector(31 downto 0)
);
end entity Risc_V_Multicycle;

architecture rtl of Risc_V_Multicycle is

-- Ajuste o tipo do PC para `signed` se ele for usado em operações aritméticas
signal pc : signed(31 downto 0);

-- Sinal imm32 como std_logic_vector para evitar conversões desnecessárias
signal imm32_internal : std_logic_vector(31 downto 0);

-- Demais sinais
signal AluOp, OrigAULA, OrigBULA, Mem2Reg : std_logic_vector(1 downto 0);
signal EscrevePCCond, EscrevePC, LouD, EscreveMem, LeMem, EscreveIR, OrigPC, EscrevePCB, EscreveReg : std_logic;
signal UlaSel : std_logic_vector(3 downto 0);
signal comp_flag : std_logic;

signal MuxOrigPC, MuxOrigAULA, MuxOrigBULA, MuxLouD, MuxMem2Reg : signed(31 downto 0); -- Sinais agora são do tipo `signed`
signal SaidaUla, regSaidaUla, A, regA, B, regB, regInstr_internal, regData_internal, pcBack, memData : std_logic_vector(31 downto 0);

begin

-- Control unit
control: entity work.risc_v_control
    port map (
        clk           => clock,
        rst           => reset,
        opcode        => regInstr_internal(6 downto 0),
        zero_flag     => comp_flag,
        EscrevePCCond => EscrevePCCond,
        EscrevePC     => EscrevePC,
        LouD          => LouD,
        EscreveMem    => EscreveMem,
        LeMem         => LeMem,
        EscreveIR     => EscreveIR,
        OrigPC        => OrigPC,
        ALUop         => AluOp,
        OrigAULA      => OrigAULA,
        OrigBULA      => OrigBULA,
        EscrevePCB    => EscrevePCB,
        EscreveReg    => EscreveReg,
        Mem2Reg       => Mem2Reg
    );

-- ULA control unit
controle_ula: entity work.risc_v_ULA_control
    port map (
        funct3  => regInstr_internal(14 downto 12),
        funct7  => regInstr_internal(31 downto 25),
        AluOp   => AluOp,
        UlaSel  => UlaSel
    );

-- Registradores
a_reg: entity work.unitary_reg
    port map (
        clk     => clock,
        enable  => '1',
        dataIn  => A,
        dataOut => regA
    );

b_reg: entity work.unitary_reg
    port map (
        clk     => clock,
        enable  => '1',
        dataIn  => B,
        dataOut => regB
    );

pc_reg: entity work.unitary_reg
    port map (
        clk     => clock,
        enable  => EscrevePC or (EscrevePCCond and comp_flag),
        -- Converter o valor de MuxOrigPC de signed para std_logic_vector antes de atribuí-lo
        dataIn  => std_logic_vector(MuxOrigPC),
        -- Converter o valor de PC de signed para std_logic_vector antes de atribuí-lo à porta de saída
        dataOut => std_logic_vector(pc)
    );

-- Memória
memory: entity work.Memory
    port map (
        clock    => clock,
        we       => EscreveMem,
        re       => LeMem,
        address  => MuxLouD(13 downto 2),  -- Supondo que o endereço seja `signed`
        datain   => regB,
        dataout  => memData
    );

-- Mux Mem2Reg
mux_mem_2_reg: entity work.Mux_2_to_4
    port map (
        A   => regSaidaUla,
        B   => std_logic_vector(pc),  -- Converta PC para std_logic_vector
        C   => regData_internal,
        D   => (others => '0'),
        sel => Mem2Reg,
        Y   => MuxMem2Reg
    );

-- Registradores de instrução e dados
reg_data: entity work.unitary_reg
    port map (
        clk     => clock,
        enable  => '1',
        dataIn  => memData,
        dataOut => regData_internal
    );

reg_instr: entity work.unitary_reg
    port map (
        clk     => clock,
        enable  => EscreveIR,
        dataIn  => memData,
        dataOut => regInstr_internal
    );

-- Conectar saídas
regInstr <= regInstr_internal;
regData  <= regData_internal;
imm32    <= imm32_internal;
pcOut    <= std_logic_vector(pc);  -- Converta o PC de signed para std_logic_vector

end architecture rtl;
